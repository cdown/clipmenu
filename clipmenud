#!/bin/bash

: "${CM_ONESHOT=0}"
: "${CM_OWN_CLIPBOARD=1}"
: "${CM_PRIVACY=1}"
: "${CM_DEBUG=0}"
: "${TMPDIR=/tmp}"

major_version=3
cache_dir=$TMPDIR/clipmenu.$major_version.$USER/
cache_file=$cache_dir/line_cache
lock_file=$cache_dir/lock
lock_timeout=2

_xsel() {
    timeout 1 xsel --logfile /dev/stderr "$@"
}

get_first_line() {
    # Args:
    # - $1, the file or data
    # - $2, optional, the line length limit

    data=${1?}
    line_length_limit=${2-300}

    # We look for the first line matching regex /./ here because we want the
    # first line that can provide reasonable context to the user. That is, if
    # you have 5 leading lines of whitespace, displaying " (6 lines)" is much
    # less useful than displaying "foo (6 lines)", where "foo" is the first
    # line in the entry with actionable context.
    awk -v limit="$line_length_limit" '
        BEGIN { printed = 0; }

        printed == 0 && NF {
            $0 = substr($0, 0, limit);
            printf("%s", $0);
            printed = 1;
        }

        END {
            if (NR > 1) {
                print " (" NR " lines)";
            } else {
                printf("\n");
            }
        }' <<< "$data"
}

debug() {
    if (( CM_DEBUG )); then
        printf '%s\n' "$@" >&2
    fi
}

if [[ $1 == --help ]] || [[ $1 == -h ]]; then
    cat << 'EOF'
clipmenud is the daemon that collects and caches what's on the clipboard.
when you want to select a clip.

Environment variables:

- $CM_ONESHOT: run once immediately, do not loop (default: 0)
- $CM_DEBUG: turn on debugging output (default: 0)
- $CM_PRIVACY: do not print clipboard content to standard out (default: 1)
- $CM_OWN_CLIPBOARD: take ownership of the clipboard (default: 1)
- $TMPDIR: specify the base directory to store the cache dir in (default: /tmp)
EOF
    exit 0
fi


# It's ok that this only applies to the final directory.
# shellcheck disable=SC2174
mkdir -p -m0700 "$cache_dir"

declare -A last_data

exec {lock_fd}> "$lock_file"

while (( CM_ONESHOT )) || sleep "${CM_SLEEP:-0.5}"; do
    if ! flock -x -w "$lock_timeout" "$lock_fd"; then
        if (( CM_ONESHOT )); then
            printf 'ERROR: %s\n' 'Timed out waiting for lock' >&2
            exit 1
        else
            printf 'ERROR: %s\n' \
                'Timed out waiting for lock, skipping this run' >&2
            continue
        fi
    fi

    for selection in clipboard primary; do
        data=$(_xsel -o --"$selection"; printf x)

        debug "Data before stripping: $data"

        # We add and remove the x so that trailing newlines are not stripped.
        # Otherwise, they would be stripped by the very nature of how POSIX
        # defines command substitution.
        data=${data%x}

        debug "Data after stripping: $data"

        if [[ $data != *[^[:space:]]* ]]; then
            debug "Skipping as clipboard is only blank"
            continue
        fi

        if [[ ${last_data[$selection]} == "$data" ]]; then
            debug 'Skipping as last selection is the same as this one'
            continue
        fi

        last_data[$selection]=$data

        first_line=$(get_first_line "$data")

        if (( CM_PRIVACY )); then
            printf 'New clipboard entry on %s selection.\n' \
                "$selection"
        else
            printf 'New clipboard entry on %s selection: "%s"\n' \
                "$selection" "$first_line"
        fi

        filename="$cache_dir/$(cksum <<< "$first_line")"
        debug "Writing $data to $filename"
        printf '%s' "$data" > "$filename"

        debug "Writing $first_line to $cache_file"
        printf '%s\n' "$first_line" >> "$cache_file"

        if (( CM_OWN_CLIPBOARD )) && [[ $selection != primary ]]; then
            # Take ownership of the clipboard, in case the original application
            # is unable to serve the clipboard request (due to being suspended,
            # etc).
            #
            # Primary is excluded from the change of ownership as applications
            # sometimes act up if clipboard focus is taken away from them --
            # for example, urxvt will unhilight text, which is undesirable.
            #
            # We can't colocate this with the above copying code because
            # https://github.com/cdown/clipmenu/issues/34 requires knowing if
            # we would skip first.
            _xsel -o --"$selection" | _xsel -i --"$selection"
        fi
    done

    flock -u "$lock_fd"

    if (( CM_ONESHOT )); then
        debug 'Oneshot mode enabled, exiting'
        break
    fi
done
