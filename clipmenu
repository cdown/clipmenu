#!/usr/bin/env sh

: "${CM_LAUNCHER=dmenu}"
: "${CM_HISTLENGTH=8}"
: "${CM_BUFFERS=0}"

# FIXME: question - do we need nullglob there?
#~ shopt -s nullglob

cache_dir=$(clipctl cache-dir)
cache_file=$cache_dir/line_cache
CM_BUFFERS=$((CM_BUFFERS))

# Not -h, see #142
if [ "$1" = '--help' ]; then
    cat << 'EOF'
clipmenu is a simple clipboard manager using dmenu and xsel. Launch this
when you want to select a clip.

All arguments are passed through to dmenu itself.

Environment variables:

- $CM_DIR: specify the base directory to store the cache dir in (default: $XDG_RUNTIME_DIR, $TMPDIR, or /tmp)
- $CM_HISTLENGTH: specify the number of lines to show in dmenu/rofi (default: 8)
- $CM_LAUNCHER: specify a dmenu-compatible launcher (default: dmenu)
- $CM_OUTPUT_CLIP: if set, output clip selection to stdout
- $CM_BUFFERS: use itermediate cache buffers for higher performance at the cost of memory usage, 0 to 3 (default: 0)
EOF
    exit 0
fi

if ! [ -f "$cache_file" ]; then
    printf '%s\n' 'No cache file yet, did you run clipmenud?'
    exit 2
fi

# Blacklist of non-dmenu launchers
launcher_args='-l "${CM_HISTLENGTH}"'
if [ "$CM_LAUNCHER" = 'fzf' ]; then
    launcher_args=
fi

# rofi supports dmenu-like arguments through the -dmenu flag. -p wastes space
# in real dmenu, but rofi shows "dmenu:" anyway, so pass it here only.
[ "$CM_LAUNCHER" = 'rofi' ] && set -- -dmenu -p clipmenu "$@"

list_clips() {
    if [ ${CM_BUFFERS} -eq 0 ]; then
        LC_ALL=C sort -rnk 1 < "$cache_file" | sed 's/^[^ ]* //' | awk '!seen[$0]++'
        return
    fi
    [ "$cache_file-a" -nt "$cache_file" ] || LC_ALL=C sort -ruk 2 < "$cache_file" > "$cache_file-a"
    if [ ${CM_BUFFERS} -le 1 ]; then
        LC_ALL=C sort -rnk 1 < "$cache_file-a" | sed 's/^[^ ]* //'
        return
    fi
    [ "$cache_file-b" -nt "$cache_file-a" ] || LC_ALL=C sort -rnk 1 < "$cache_file-a" > "$cache_file-b"
    if [ ${CM_BUFFERS} -le 2 ]; then
        sed 's/^[^ ]* //' < "$cache_file-b"
        return
    fi
    [ "$cache_file-c" -nt "$cache_file-b" ] || sed 's/^[^ ]* //' < "$cache_file-b" > "$cache_file-c"
    cat "$cache_file-c"
}

if [ "$CM_LAUNCHER" = 'rofi-script' ]; then
    if [ $# -gt 0 ]; then
        chosen_line="${!#}"
    else
        list_clips
        exit
    fi
else
    chosen_line=$(list_clips | eval "$CM_LAUNCHER ${launcher_args}" "$@")
    launcher_exit=$?
fi

[ "$chosen_line" ] || exit 1
file=$cache_dir/$(printf '%s' "$chosen_line" | cksum)
[ -f "$file" ] || exit 2

for selection in clipboard primary; do
    xsel --logfile /dev/null -i --"$selection" < "$file"
done

if [ $(( CM_OUTPUT_CLIP )) -ne 0 ]; then
    cat "$file"
fi

exit "${launcher_exit:-"$?"}"
